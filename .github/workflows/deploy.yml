name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set AWS credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create prod config file
        run: echo "${{ secrets.PROD_APP_CONFIG }}" > src/main/resources/application-prod.yml

      - name: Jib build
        run: ./gradlew clean jib

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script:
            'aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_URL }} &&
              CONTAINER_ID=$(docker ps -aqf "name=${{ secrets.CONTAINER_NAME }}");
              docker stop $CONTAINER_ID;
              docker rm $CONTAINER_ID;
              IMAGE_ID=$(docker images -q ${{ secrets.ECR_URL }}/${{ secrets.ECR_REPOSITORY }}:latest);
              docker rmi -f $IMAGE_ID;
              docker container run -d -p 80:8080 --name ${{ secrets.CONTAINER_NAME }} ${{ secrets.ECR_URL }}/${{ secrets.ECR_REPOSITORY }}:latest;'
